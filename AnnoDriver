package com.msb.interpret;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.CompletableFuture;
import java.util.function.Supplier;
import java.util.stream.Collectors;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

public class AnnoDriver {
	
	static PrintWriter log = null;
	public static void main(String[] args) throws FileNotFoundException, ParseException {
		log = new PrintWriter(
				"C:\\Users\\manojkumar_bhosale\\Desktop\\ForMASTR\\10Aug\\log.txt");
		PrintWriter pw = new PrintWriter(
				"C:\\Users\\manojkumar_bhosale\\Desktop\\ForMASTR\\10Aug\\geneOmimMap_WithMorbid_Parellel100.txt");
		new AnnoDriver().getOmimIdListInterpret(new
				File("C:\\Users\\manojkumar_bhosale\\Desktop\\ForMASTR\\10Aug\\testgenes.bed"),pw);
		pw.close();
	}
	
	
	public Map<String, String[]> getOmimIdListInterpret(File f, PrintWriter pw)
			throws FileNotFoundException, ParseException {

		
		Map<String, String[]> geneMap = new HashMap<String, String[]>();

		Set<String> genemap = new TreeSet<>();
		try (BufferedReader br = new BufferedReader(new FileReader(f))) {

			String line = "";
			List<String> genes = new ArrayList<>();
			List<String> allOmims = new ArrayList<>();
			while ((line = br.readLine()) != null) {
				//System.out.println(line);
				String[] splited = line.split("\\t");
				String hgncName = splited[3];
				// pw.print(splited[3] + "\t");

				if (hgncName.contains("/")) {
					pw.println();
					continue;
				}

				genemap.add(hgncName);

				// String server =
				// "http://knowledgeservice.dev.cartagenia.com/rest/1/knowledgesources/OMIM_3/genes/"
				// Get request
				// String server =
				// "http://knowledgeservice.dev.cartagenia.com/rest/1/knowledgesources/OMIM_5/genes/"
				// + hgncName;
				// String server =
				// "https://customer2.dev.alissa.agilent.com/ks/rest/1/knowledgesources/OMIM_1/genes/"
				// + hgncName;
			}
			log.println("Total non slash genes : " + genemap.size());

			int batch = 150, counter = 0;
			
			for (String hgncname : genemap) {
				
				if(counter >= batch){
					counter = 0;
					log.println(genes);
					log.flush();
					List<String> omims = getOmims(genes);
					allOmims.addAll(omims);	
					genes = new ArrayList<>();
				}
				genes.add(hgncname);
				counter++;
				//System.out.println(genes);
			}
			//pw.close();


			for(String record : allOmims){
				pw.println(record);
			}
			//pw.close();
			log.close();
			
		} catch (IOException e) {
			e.printStackTrace();
		}

		
		return geneMap;

	}

	
	public List<String> getOmims(List<String> genes){

        List<CompletableFuture<String>> futures =
        		genes.stream()
                          .map(gene -> getToDoAsync(gene))
                          .collect(Collectors.toList());

        List<String> result =
                futures.stream()
                        .map(CompletableFuture::join)
                        .collect(Collectors.toList());
        log.println(result);
        return result;
    }


    CompletableFuture<String> getToDoAsync(String gene){

        CompletableFuture<String> future = CompletableFuture.supplyAsync(new Supplier<String>() {
            @Override
            public String get() {
                String res="";
				try {
					res = getOmimAnnotation(gene);
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

                return res;
            }
        });

        return future;
    }

	
	public String getOmimAnnotation(String hgncname) throws ParseException, IOException{
		
		StringBuffer result = new StringBuffer(); 
		
		String server = "https://multiplicom.test.alissa.agilent.com:443/interpret/api/1/integration/genomebuilds/1/genes/"+hgncname;

		URL url = new URL(server);
		//pw.print(hgncname + "\t");

		URLConnection conn = url.openConnection();
		HttpURLConnection httpConnection = (HttpURLConnection) conn;


		
		httpConnection.setRequestMethod("GET");
		
		httpConnection.setRequestProperty("Accept", "application/json");
		String masterKey = MASTRAnnotationUtil.getHttpHeader();
		
		httpConnection.setRequestProperty("Authorization", MASTRAnnotationUtil.getHttpHeader());
		
		httpConnection.setUseCaches(false);
		httpConnection.setDoInput(true);
		httpConnection.setDoOutput(true);
		httpConnection.setConnectTimeout(5000);
		int responseCode = httpConnection.getResponseCode();

		if (responseCode != 200) {
			//throw new RuntimeException("Response code was not 200. Detected response was " + responseCode);
			System.out.println(server+" Response Code:"+responseCode);
			return "";
		}

		InputStream response = conn.getInputStream();
		String output;
		Reader reader = null;
		try {
			reader = new BufferedReader(new InputStreamReader(response, "UTF-8"));
			StringBuilder builder = new StringBuilder();
			char[] buffer = new char[8192];
			int read;
			while ((read = reader.read(buffer, 0, buffer.length)) > 0) {
				builder.append(buffer, 0, read);
			}
			output = builder.toString();
		} finally {
			if (reader != null)
				try {
					reader.close();
				} catch (IOException logOrIgnore) {
					logOrIgnore.printStackTrace();
				}
		}
		// System.out.println(output);
		JSONParser parser = new JSONParser();
		//System.out.println(output);
		Object obj = parser.parse(output);
		JSONObject jobj = (JSONObject) obj;
		result.append(hgncname+"\t");
		if(jobj == null) {
			//pw.println();
			result.append("");
		}
		
		JSONObject jxrefs = (JSONObject) jobj.get("xrefs");
		JSONArray jomimGeneArr = (JSONArray) jxrefs.get("xrefs:omim:gene");
		JSONArray jomimMorbArr = (JSONArray) jxrefs.get("xrefs:omim:morbid");

		//System.out.println(hgncname+" ");
		if(jomimGeneArr != null) {
			for (int i = 0; i < jomimGeneArr.size(); i++) {
				String id = (String) jomimGeneArr.get(i);
				//pw.print("omimGene:"+id+",");
				result.append("omimGene:"+id);
			}
		}
		if(jomimMorbArr != null) {
			for (int i = 0; i < jomimMorbArr.size(); i++) {
				String id = (String) jomimMorbArr.get(i);
//				/pw.print("omimMorbid:"+id+",");
				result.append("omimMorbid:"+id);
			}
		}
		//pw.println();
		//pw.flush();
		return result.toString();
	}

}
