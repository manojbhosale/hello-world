System.arraycopy(arg, arg, arg, arg,)
Arrays.copyOf(int[] original, int newLength)

this and super cannot be used in static context.
compile time and run time polymorphisms/dynamic method dispatch
If there is any private, final or static method in a class, there is static binding.
Overriding - Dynamic binding
Overloading - Static binding

Q1. What are various types of Class loaders used by JVM ?
Bootstrap - Loads JDK internal classes, java.* packages.
Extensions - Loads jar files from JDK extensions directory - usually lib/ext directory of the JRE
System - Loads classes from system classpath.

Assert statements should not cause side effects. Line 22 changes the value of z if the assert statement is false.
assert <expression1>: <expression2> // expression1 must return boolean value and expression2 must return some value and can not be void

Legally, however, AssertionError is a subclass of Throwable, so it can be caught. But just don't do it! If you're going to try to recover from something, it should be an exception. To discourage you from trying to substitute an assertion for an exception, the AssertionError doesn't provide access to the object that generated it. All you get is the String message.

Basically the prefix and postfix unary operators have a higher order of evaluation than the relational operators. So on line 4 the variable i is incremented and the variable j is decremented before the greater than comparison is made. 

what is the size of the object after assigning the null value?
What is null?
Ans: In practice, the programmer can ignore the null type and just pretend that null is merely a special literal that can be of any reference type.

Distributed - Ionvolves RMI, Socket programming

Java sandbox - provides very restrictive environment in which untrusted(downloaded/remote) code runs. These types of code(mostly applets) are not allowes to access vital resources like system files.(Ref: http://docs.oracle.com/javase/7/docs/technotes/guides/security/spec/security-spec.doc1.html)

Not all statements in try block are guranteed to be executed. If I want guranteed execution then I need to include those in finally block.

Exceptions can be handled but errors can not be handled.
Exceptions always occur at run time.
Checked exception - Called as compile time exception but occur at run time actually. Compiler checked exception and forced to handle. e.g. File not found exception.
Unchecked exception - Run time exception. Here, compiler can not predict the exception so need to handle explicitly by developer.
Throw - Generate the exception explicitly.
Throws - Describe or declare.
Custom exception:
	Custom exceptions should normally be checked exceptions and force to handle the exception.
	The calling code should normally handle the exception is best practice as developer can handle group multiple exceptions in single try block.
Chained exceptions: These were added in java 1.4
Assertions: Introduced in java 1.5; 
Invariant -> In computer science, an invariant is a condition that can be relied upon to be true during execution of a program, or during some portion of it. It is a logical assertion that is held to always be true during a certain phase of execution. For example, a loop invariant is a condition that is true at the beginning and end of every execution of a loop.; More about use of assertion in precondition, postcondition and class invariants.
Multiple exceptions can be handled by one catch block;since JDK 1.7


Assertion throws AssertionError

Does the methods have to be static to achieve static binding/early binding/compiletime polymorphism ?
Ans: No, It can be final or private. Static binding is better performance wise (no extra overhead is required). Compiler knows that all such methods cannot be overridden and will always be accessed by object of local class. Hence compiler doesn’t have any difficulty to determine object of class (local class for sure). That’s the reason binding for such methods is static.

Architecture neutral and portable difference?
Basically they're saying that in addition to running on multiple environments (because of being interpreted within the JVM), it also runs the same regardless of environment. The former is what makes it portable, the latter is what makes it architecture-neutral. For example, the size of an int does not vary based on platform; it's established by the JVM.


Distributed application:
Software that executes on two or more computers in a network. In a client-server environment, distributed applications have two parts: (1) the 'front end' that requires minimal computer resources and runs on the client computer(s), and (2) the 'back end' that requires large amounts of data crunching power and/or specialized hardware, and runs on a suitably equipped server computer.

IO:
Byte Streams:
	File
	Primitives
	References

InputStream(AC), OutputStream(AC) <- just know how to read and write and not specific to any input. Were part of java 1.1. Operate on 8 bit(1 byte data)
FileInputStream(C), FileOutputStream(C) <- specific to read and write file.
DataInputStream(C), DataOutputStream(C) <- For reading and writing the primitive types. Here conversion of primitives to bytes and bytes to primitives is taken care of by this class. If we use FileInputStream then it will be developers responsibility to write business logic for converison. File writing will be taken care of by FileOutputStream.
ObjectInputStream(c), ObjectOutputStream(c) <- takes care of converting objects to bytes and bytes and objects

we can not interconnect byte and character streams, because the byte and character streams differ in the functionalities provided.

Some prior knowledge is required to reader about the sequence in which the data was written eg. int, float, int

char streams: (Introduced in java 1.2, operate on 16 bit(2 byte) unicode character)
Reader(AC), Writer(AC)
FileReader(C), FileWriter(C) 
Here, there are no primitive and reference streams in char streams as bytes to primitives and vice a versa is possible but not character to primitive/reference and vice a versa.
Inside JV all text is held as unicode.
With readers and writers ist not possible to create directory;Error occurs of directory does not exist and we try to create file.
BufferedStreams
	Wrap other streams
	Apply decorator pattern
	Primarily used for high volume read and write operations
	Allow stream markers


FileInputStream implements Closeable <- till 1.6 .Required to have explicit closing.
From JDK 1.7 Autocloseable interface was added as super interface to Closeable().
Closeable had IOException while AutoCloseable() has Exception only.

If some exception occurs between where try block ends and the finally block starts
try -> catch -> finally -> application termination
resource is closed -> then out of the try block. So no need of finally block.

We can create multiple resources in try with block, seperated by semicolon. Here close() method will be called in reverse order to that of the opening.

Autocloseable is Superinterface of Closeable(). This does not require change in the API.

Char streams:
write() method of FileWriter will write the string character by character.


Why java has 2 types of streams?



Serialization :
To persist state of an object e.g. svae it in file, share over the network.

 Scenario 1:
 Serialized object contains non serialized object reference
 
 Scenario 2:
 Non serialized object contains serialized object reference
 
 In inheritance:
 
	 A class CAN NOT BE deserialized if it implements serializable but the super class does not implements serializable; Otherwise super class must have a no-argument constructor accessible to the sub class; this constructor will be used to initialize sub classes sub object;
	 
	 A class CAN BE serialized if it does not implement serializable but its super class does implements serializable;
 
 In Composition:	 
	Class which is included in another class must implement the serializable to make including class serializable otherwise NotSerializableException is thrown.
	
Contents of serialization:
	Class of object
	Signature of class
	values of all non transient and non static fields
	other referenced objects
	*A serial version unique identifier
	

Console Class: 
	Added in JDK 1.6
	Providdes methods to access character based consome decvices in curent JVM.
	Reefres to console associcated with curent operating system.
	Console con = System.console();
Collections:
 Only limitation of collection is that it supports only Objects and not primitives.
								Collection(I)(Added in JDK 1.2)
									\
				   -------------------------------					
				 List(I)						Set(I)
Indexed   			Yes							No		 
Allow Duplicate		Yes							No
Null values			Multiple					only one

E.g.
					LinkedList				HashSet
					ArrayList				LinkedHashSet
					Vector(Legacy class from JDK 1.0)					TreeSet
					
Major drawback of the simple array list is that it can store Object of any type.
	Causing-> ClassCastException, CmpileTime issues and need to check the datatype and implement the logic.
	
To overcome this generics were introduced in java 5 to collections making us use only one datatype in collections. This adds compiletime check. No chances of class cast exception.

In jdk 7 "Type infererence" is introduced which maps internally the data type on left side of equla side to the right side. Till 1.6 we need to write type on both side in diamond operator. Here Type includes the type and its sub classes.
					
Till jdk 1.4 explicit boxing was required. From 1.5 this is dome implicitly termed as autoboxing.
 
 
Ways to iterate over a Collection:
	Indexed for loop
	For each loop or enhanced for loop:
		For indexed and non indexed represention both.
	Iterator

Vector and Enumeration were present in 1.0 but after Collection framework was added in 1.2 those were included in Collections framework.
Vector is thread safe 

Comparable is from java.lang package <- any object of type comparable can be compared.
Comparator is from java.util package <- it compares 2 different entities.

Its better to always go for comparator as comparable will provide with only one logic for sorting the objects.
 
NvigableSet extends SortedSet
 introduced in 1.6
 TreeSet implements NavigableSet in 1.6 before it was implementing SortedSet.
 
 higher() - strictly greater than , gives null in two cases
 ceiling() - greater than ro equal, fives null in only one
 
 Map(I) doe not belong to Colletion hierarchy.
 
 
 HashSet <- adds keys randomly
 LinkedHashSet <- preserves the insertion orcer
 TreeSet <- Adds values in sorted order
 
Multithreading:

	Multitasking
		process based - multi processing
		thread based  - multi threading

Exercise: 		
	Resource -> int num
				getNum();
				setNum();
				
				Producer -> setNum
				Consumer -> getNum

	java.lang.Runnable(I) <- public void run()
	java.lang.Thread(C) <- lifecycle methods are defined in Thread class.
	
	Thread class implements Runnable interface.
	start() <- method will inform processor about the execution of run() method and makes eligible to run. Will add thread to thread pool.
	run() <- method will be called by processor.
	New born -> Ready to run -> running -> Dead
				
	asynchronous <- unpredictable output.			
				
	Inter thread communication: 
		to resove the above problem
		wait() -> current thread tp wait state
		notify() -> will notify the thread waiting on current resource
		notifyall() -> notify multiple waiting thread for current resource
		
		When producer is running then the consumer should be in wait statea and vice a versa. 
		
		static sleep() - current thread goes in sleep mode. Next thread in thread pool will start execution. The next thread can not be detemined
		static yield() - Current thread goes in wait state. Here priority is criteria for next thread.
		instance method join() - Current thread goes in sleep mode wait/pause state. Thread on which the join is called

JDBC <- java database connectivity
			
	JDBC API in java.sql package.
	JDBC API needs jdbc driver to communicate with database application.
	
	4 types of drivers <- 
	
	Type-1 -> JDBC ODBC bridge -> Open database connectivity is provided by microsoft to connect to databases. Every database will have one driver. Provided .dll files which made java dependent on windows platform hampered java platform independence. Also speed of execution is slow as communication has multiple steps java -> ODBC -> database.
	
	Type-2 -> Native API- Partly java driver -> here platform dependency limitation is overcome. These are provided by databases themselves. Java <-> database. Increased speed and made platform independent. Were written in c/c++(Native). Compilation of the native needs to be done reducing speed. To overcome this Type 3 was introduced.
	
	Type-3 -> Driver in complete java so increased speed. But multitier and need to be implemented at client side. So execution speed is reduced but conversion overhead is still there.
	
	Type-4 -> To overcome the extra tier in 3rd type. Speed is faster. No heavy installtion at client side as not multi tier. Fastest and widely used in application.
	
	
	* Java  JDBC API has more interfaces and its implementation is provided by drievrs like, Oracle, MySQL.
	
	Standard steps of JDBC use:
	
	Load the driver 
	Establish connection withd database
	Execute the queries
	Handle exception
	
	Interfaces to execute the query :
		Statement(I) <- execute SQL queries
		PreparedStatement(I) <- execute SQL queries.
		CallableStatement(I) <- SQL and PL/SQL queries.
	
	Connection <- interface which is implemented in mysql driver jar. getConnection() method creates object of driver class and returns. So we write code w.r.t java SQL API..
	The basic idea behind using Class.forName() is to load a JDBC driver implementation, a (normal) JDBC driver must contain a static initializer that registers an instance of the driver implementation with java.sql.DriverManager:
	JDBC drivers must implement the Driver interface, and the implementation must contain a static initializer that will be called when the driver is loaded. This initializer registers a new instance of itself with the DriverManager
	Since JDBC 4.0 however there is a new way to register drivers: the jar of a JDBC drivers needs to include a file /META-INF/services/java.sql.Driver which contains the name(s) of the java.sql.Driver implementations in that jar. When you create a connection using the DriverManager, it will use java.util.ServiceLoader to enumerate all /META-INF/services/java.sql.Driver files in the classpath and load all drivers so they get registered.
	The reasons drivers are loaded this way(with ForName()), is that it allows you to decouple an application from the driver (and database) it uses. This means that you can write, compile and even distribute an application without any drivers, you only need to use the interfaces provided in the java.sql (and javax.sql) packages which is part of Java without needing to access the implementation directly.(Source: http://stackoverflow.com/questions/20078586/why-we-use-class-forname-oracle-jdbc-driver-oracledriver-while-connecting-to)
	
	What is the need of foName method?
	
	ResultSet(I) 
		cursor points to the beginning of the result.
		varchar repersents in string in java.
		next() <- to get the next record.
		ResultSetMetaData(I) <- gives information about the rsultset , column name, column type, column count.
	
	CallableStatement(I)
		PL sql has funciton , stored procedures.
		prepareCall() <- Creates callable statement object for calling database procedures.
		why to create procedures? <- to execute multiple times.
		
Inner classes:
	For type encapsulation
	When a class/interface is required by this class only
	Local class = class declared inside a block/ method
	Anonymous class = clas without name
	
	Inner Classes:
		inner class can be private, default, protected and public . Also can be static. If class is declared static them method must be declared static to use it outside.
		inner classes can be abstract but of no use in such case 
		only inner class can be static
		Inner class needs to be static in order to be extended by other class.
		Outer class can be public, abstract or final
		Local iner classes:
			class inside the method or local to a method.
			only default, abstract and final is permitted for local inner class.
			

		Anoymous inner classes:
			abstract can be used with static in case of inner class 
			ai.mymethod1();  can not be called as Superclass reference can not call subclass' non overridden method
			with this approach only already created method can be used. No new method can be added.
			here in case of anonymous classes tighter encapsulation is achieved compared to inner classes as anonymous inner classes can not be used(at all) out side this class while other types of inner classes can be reused to some extent. 
		

	
	

In java6 Console class is introduced. Older System.in class can also be used in place of it. But System.in support ANSCI characters while Console supports Unicode characters

ArrayDeque:
Null values can’t be added
Also it is not thread safe


Lambdas Ref https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#approach6

JDK defines several standard functional interfaces in java.util.function
Remember, to use a lambda expression, you need to implement a functional interface
The operation filter, map and forEach are aggregate operations. Aggregate operations process elements from stream not directly from collection.A streqam is a sequence of elements. Unlike collections it is not a data structures that stores the elements. Instead, a stream carries values from a source, such as collection, through a pipeline. A pipeline is a sequence of stream operations, which in this example is filter- map-forEach. In addition, aggregate operations typically accept lambda expressions as parameters, enabling you to customize how they behave.

Note that a lambda expression looks a lot like a method declaration; you can consider lambda expressions as anonymous methods—methods without a name

It follows that you can only use lambda expressions in situations in which the Java compiler can determine a target type:
For method arguments, the Java compiler determines the target type with two other language features: overload resolution and type argument inference.
You can serialize a lambda expression if its target type and its captured arguments are serializable. However, like inner classes, the serialization of lambda expressions is strongly discouraged.

Main use of lambda expressions “Notice that the interface Comparator is a functional interface. Therefore, you could use a lambda expression instead of defining and then creating a new instance of a class that implements Comparator:”
Method References:
You use lambda expressions to create anonymous methods. Sometimes, however, a lambda expression does nothing but call an existing method. In those cases, it's often clearer to refer to the existing method by name. Method references enable you to do this; they are compact, easy-to-read lambda expressions for methods that already have a name.

Default Methods:
Solves the problem of backward compatibility.
Default methods can be used directly by the implementing class.
These methods can be overridden by extending interface. 
Default methods enable you to add new functionality to existing interfaces and ensure binary compatibility with code written for older versions of those interfaces.

When you extend an interface that contains a default method, you can do the following:
•	Not mention the default method at all, which lets your extended interface inherit the default method.
•	Redeclare the default method, which makes it abstract.
•	Redefine the default method, which overrides it.

 
Like local and anonymous classes, lambda expressions can capture variables; they have the same access to local variables of the enclosing scope. However, unlike local and anonymous classes, lambda expressions do not have any shadowing issues (seeShadowing for more information). Lambda expressions are lexically scoped. This means that they do not inherit any names from a supertype or introduce a new level of scoping. Declarations in a lambda expression are interpreted just as they are in the enclosing environment. 
lambda expression does not introduce a new level of scoping.
However, like local and anonymous classes, a lambda expression can only access local variables and parameters of the enclosing block that are final or effectively final.


1) To check if java supports 32 or 64 bit.
>java -d32
>java -d64
2) One must specify the JVM path in "eclipse.ini" file as below
-vm
C:\Program Files (x86)\Java\Java8_45\bin\javaw.exe
3) 



TESTJN

If the custom exception class extends the RuntimeException then no need to add throws clause by exception throwing method.
If exception class is extended then need to add throws clause.
When multiple resources are opened in try-with-resources, it closes them in the reverse order to avoid any dependency issue. You can extend my resource program to prove that.
Java 7 has introduced a new interface java.lang.AutoCloseable that extends java.io.Closeable interface. To use any resource in try-with-resources, it must implement AutoCloseable interface else java compiler will throw compilation error.
If an exception is thrown in both try block and finally block, the method returns the exception thrown in finally block.

For try-with-resources, if exception is thrown in try block and in try-with-resources statement, then method returns the exception thrown in try block.

Unchecked exceptions are mostly caused by poor programming, for example NullPointerException when invoking a method on an object reference without making sure that it’s not null.

Only checked exceptions enforce the throws clause. Nad not the unchecked exceptions.

OutOfMemoryError in Java is a subclass of java.lang.VirtualMachineError and it’s thrown by JVM when it ran out of heap memory. We can fix this error by providing more memory to run the java application through java options.
$>java MyProgram -Xms1024m -Xmx1024m -XX:PermSize=64M -XX:MaxPermSize=256m

Exception in thread main java.lang.UnsupportedClassVersionError:
Exception in thread main java.lang.NoClassDefFoundError:
Exception in thread main java.lang.NoSuchMethodError: main:
Exception in thread “main” java.lang.ArithmeticException: 


The sequence of classses does not matter in throws clause but it matters in multi catch block. In multi catch block superclass exception and subclass exception can not be caught together. Need to catch sepearately.

The program won’t compile because JAXBException is a checked exception and foo() method should throw this exception to catch in the calling method. You will get error message as “Unreachable catch block for JAXBException. This exception is never thrown from the try statement body”.

The above program won’t compile because start() method signature is not same in subclass. To fix this issue, we can either change the method singnature in subclass to be exact same as superclass or we can remove throws clause from subclass method as shown below.

The above program won’t compile because exception object in multi-catch block is final and we can’t change it’s value. You will get compile time error as “The parameter e of a multi-catch block cannot be assigned”.
If a method in parent class throws checked exception, child class can not change the signature. The child can ignore it or add more unchecked exceptions.
If parent class method does not throw checked exception, the child class method cannot throw it either.
Java 7 Automatic Resource Management(ARM)

se javadoc @throws to clearly specify the exceptions thrown by the method, it’s very helpful when you are providing an interface to other applications to use.

5) Why do you think Checked Exception exists in Java, since we can also convey error using RuntimeException ?
One of the reason I see is that its a design decision, which is influenced by experience in programming language prior to Java e.g. C++. Most of checked exceptions are in java.io package, which make sense because if you request any system resource and its not available, than a robust program must be able to handle that situation gracefully. By declaring IOException as checked Exception, Java ensures that your provide that gracefully exception handling.
Another possible reason could be to ensuring that system resources like file descriptors, which are limited in numbers, should be released as soon as you are done with that using catch or finally block. Effective Java book from Joshua Bloch has couple of items in this topic, which is again worth reading.

It’s worth knowing that, finally block in Java executes even when return keyword is used in try block.

method need not throw an exception in order to be part of the throws list.


System.ou.print() function fist converts the whole parameters into string and then prints, before “Hello” goes to output stream 1 / 0 error is encountered which is cached by catch block printing just “World” .
Another worth noting rule of method overriding in Java is that overriding  method can not throw checked Exception which is higher in hierarchy than overridden method. Which means if overridden method throws IOException than overriding method can not throw java.lang.Exception in its throws clause because java.lang.Exception comes higher than IOException in Exception hierarchy. This rule doesn't apply to RuntimeException in Java, which is not even need to be declared in throws clause in Java.



ince IOException is a checked Exception and start() method doesn't throw IOException, so compiler will flag error as "exception java.io.IOException is never thrown in body of corresponding try statement", but if you change IOException to Exception compiler error will disappear because Exception can be used to catch all RuntimeException which doesn't require declaration in throws clause.

Errors can be thrown

Default handler handles when no handling is performed.

Javas exception handling mechanism handles only the runtime errors.


Java7 features

Switch with String:
Switch does case-sensitive comparison with case statements. Switch gives a more efficient and cleaner code than if-else if-else code.
Why switch is more efficient than if else?
It seems that the compiler is better in optimizing a switch-statement than an if-statement. The compiler doesn't know if the order of evaluating the if-statements is important to you, and can't perform any optimizations there. You could be calling methods in the if-statements, influencing variables. With the switch-statement it knows that all clauses can be evaluated at the same time and can put them in whatever order is most efficient.

2. Underscores Between Digits in Numeric Literals

Underscores are permitted in numeric literals. You can place underscores where you feel required to increase readability; like between hundreds and thousands, thousands and lakhs etc.
This is used to group numbers in a bigger literal value (especially of long data type).
Note: Do not place underscore at the beginning or ending of the literal value.
But the parsing does not work with underscrores.

3. Integral Types as Binary Literals
With JDK 1.7, the integer whole numbers like byte, short, int and long can be expressed in binary format also with a prefix of 0b or 0B. Earlier, we have 0 prefix for octal and 0x prefix for hexa and no prefix for binary. JDK 1.7, introduced 0b to represent binary literals.

4. Handling multiple exceptions in a single catch block

5. Try-with-resources Statement
Any resource (class) that implements interface "java.lang.AutoCloseable" is eligible as a resource statement to write in try block. From JDK 1.7, many classes implement AutoCloseable interface, like BufferedReader, PrintStream, Scanner, Socket etc.

Closeable and Flushable interfaces were introduced with JDK 1.5 version and part of java.io package.
The close() and flush() methods throw a checked exception IOException and must be handled when these methods are used.
JDBC 4.1 can make use of this try-catch-resource management. Following is the snippet of code.

6. Automatic Type Inference in Generic object instantiation

(Diamond operator, <> , in collection classes)
In JDK 1.7, empty angle brackets (known as diamond operator), <>, can be used in specifying generic type instead of writing the exact one. But remember, the compiler should be able to judge the type from the generics statement you write.

7. Static blocks

Earlier to JDK 1.7, to print static blocks no main() method is required. But from JDK 1.7, if no main() exists, static blocks will not be executed.

Java 1.8 features:

1. Method References:

You can call the methods with their names (references) with :: operator.
 Arrays.sort(names, Test::matchStringLength);
 
2. 
toArray() creates new array and hence free to modify it.This method acts as bridge between array-based and collection-based APIs.


http://way2java.com/java-versions-2/jdk-1-8-features/ 

Can we implement a generic interface as generic?
You can't do that in Java. You can only implement one concrete realization of the same generic interface. I would do this instead:


Out of bound byte assignments:
Byte is signed primitive datatype in java. When we assign something bigger than byte value, It is like a cycle.
Suppose you entered 300 in byte variable. After first cycle byte variable filed with 0,127 means 128 place // 300-128 = 172
After second cycle byte variable filed with 0,127 means 128 place // 172-128 = 44
Now in the third cycle it is 44. I hope this will answer your query.

Implicit casting in case of bytes:
The difference is that, there is an implicit casting in the ++ operator from int to byte, whereas, you would have to do that explicitly in case you use b = b + 1
b = b + 1;  // will not compile. Cannot cast from int to byte
You need an explicit cast: -
b = (byte) (b + 1);
Whereas, b++ will work fine. It (++ operator) automatically casts the value b + 1 which is an int to a byte.
