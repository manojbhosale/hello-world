Databases:
	Organized storage of related data
DBMS:
	set of processes which manages the database
RDBMS: ( Relational database management system)
	Here,term "relationla" referes to 2 dimentional tables.
	Collsection of tables
	Set of operators to act on tables and maintain intigrity of data
ERD:(Entity relationship diagram) 
	Entity <- objects about which information needs to be saved. Eg. Employee, Department.
	One entity will have one table in database.
	Attribute <- Property describing the entity. Eg. employee name, join date
	Relationship <- named associated between entities
		1 : 1 <- Employee , Passport details
		1 : M <- Department, Employee( From one side one to many)
		M : M <- Employee, Project (From both sides many to many)
	*In case of 1 to 1 relation all the data can be included in one table but if the #attribues are larege then those entities can be splited.
	* for 1 to M relation ship one entities primary key can be used foreign key in M table.
	*In case of M to M relationship as the primary keys can not be repeated, a third table of associating the primary keys of both entities need to be mapped to each other as foreign keys
	
Constrainsts:

Column level constraints amd table level constraints

Primary key
	Unique + Not null, only one attribute/column can be primary key in a table.
Not null
	Null value are not allowed.
Unique
	Null values are allowed but if value other than null is present then it should be unique. Unique constrains can be applied on any number of columns in table.
Foreign key
	It is primary key from other table referred in this table. Unlike primary key it can be redundant but always not null. Size and data type should be same as in table of origin.
Default
	This constraint is used to assign default value in column if no value is specified at the time if insertion
Check
	This constraint is used to check the values allowed in a column Eg. one can add a check as, the column should have only values as Pass , Fail and no other value is allowed.
Composite key
	When a constraint is applied on combined values of >1 columns. Eg. two columns can be used to make aprimary key
Alternate key
	When table contains multiple columns which can be used as primary keys, these columns are called as candidate keys. Excluding theonw which isused as primarykey all other are called as alternate keys.
	
	* Its a good practice to give constraint name for primary key and foreign key.
Types of SQL statements:
	DDL: Data  definition language 
		Create 
		Alter <- Alter the schema
			Add new column
				column can be added to the end only
			modify column
			drop column
				If only one column is present then dropping not possible.
			add constraint
		rename 
			can only be used to rename a column. Only for ranming the table.
		Drop <- Deletes whole table
		Truncate <- just delets the contents of table retaining the schema
		Comment
	DML: Data manipulation language
		Insert
		Update
		Delete
	DCL: Data control language
		Save point
		Roll back
	Data retrieval statement
		Select
			Selecting specific columns from the table is called as the PROJECTION CAPABILITY.

Single row function

Character
	Case
		lower 
		initcap <- every initial letter is capitalized 
		upper
	Character
		substr <- substr(<STRING>,<starting position>,<how long/optional>) , here index is 1
		replace <- select replace('it was raining','was','is') from dual;
		concat <- takes only 2 parameters. To include multiple strings function calls can be nested.
		length <- gives length of the string
		instr <- select instr('it was raining','i',1<optional>,1<OCCURANCE optional>) fom dual <- will return 12
		lpad <- select lpad("hello",10<final sstring length>,'*') from Dual; <- will give *****hello
		rpad <- select rpad("hello",10,'*') from Dual; <- will give hello*****

	# "dual" <- dummy table
	# In Oracle "from" is mandatory with select
	# fucntions can be nested cancat(initcap(),upper())
	##to extract the user_name
				select substr(email, 1, instr(email,'@',1,1) -1) from Employee
	
Numeric
	MOD <- select MOD(29,3) from dual <- will give 2
	TRUNC <- select trunc(46.97568,2) from dual  <- will give 46.97
	ROUND <- select round(46.97568,2) from dual  <- will give 46.98 , If value is negative then it will go to the tenth place. with -1 it will give 50.

Date
	Add_months <- add_month(sysdate,<2 or -2>) <-  add or substract the days from the given date
	Moths_between <- select month_between(sysdate, hire_date) from Emplooyee;
	Next_day <- next_day(sysdate,'Friday') <- will give the next friday after today
	Last_day <- last_day(sysdate) <- last date of the month
	Trunc <- if in first half then first date. When in second half then the first date
	Round <- round(sysdate,'MONTH') OR round(sysdate,'YEAR') <- if in first half then first date if in second half then last date
	
	
	Sysdate <- will give the DD-MON-YY 

Generic:
	NVL <- NVL(commision_pct,0) <- replace null value with given value.the data type should match.
	NVL2 <- if else logic NVL2(commision_pct, <calculation if not null>, 0<if null>)
	
Combining two QUERIES with SET operators
	UNION <- number of columns and data types of columns should match.
	UNION ALL <- duplicates will not be removed, output will not be sorted which is not the case with UNION.
	INTERSECT <- only common data between two tables
	MINUS <- Only present in first table
	
JOINS: are based on primary keya nd foreign key relation
	INNER join or Equi join: we can join any number of tables; here n-1 join conditions are mandatory;
		select Employee_Id, first_name, last_name, salary, department_name
			from Employee emp, Department dept
			Where emp.department_id = dept.department_id 
			AND dept.department_id in (10,20); if alias is given then its mandatory to use the alias.
		# ANSI syntax common for all databases for join
		select Employee_Id, first_name, last_name, salary, department_name
			from Employee emp JOIN Department dept
			ON emp.department_id = dept.department_id ; 
			Where dept.department_id in (10,20);if alias is given then its mandatory to use the alias.
			
	Cartesian <- happens when join condition is not written; one should avoid cartesian results 
	
	NATURAL JOIN <- it implicitly finds the common column and non need of ON clause; if no common column is found then the cartesian will take place.
	
Oracle SQL and SQL server/MS SQL Server
	Perhaps the most obvious difference between the two RDBMS is the language they use. Although both systems use a version of Structured Query Language, or SQL, MS SQL Server uses Transact SQL, or T-SQL, which is an extension of SQL originally developed by Sybase and used by Microsoft. Oracle, meanwhile, uses PL/SQL, or Procedural Language/SQL. Both are different “flavors” or dialects of SQL and both languages have different syntax and capabilities. The main difference between the two languages is how they handle variables, stored procedures, and built-in functions. PL/SQL in Oracle can also group procedures together into packages, which can’t be done in MS SQL Server. In my humble opinion, PL/SQL is complex and potentially more powerful, while T-SQL is much more simple and easier to use.


Intermediate SQL queries:

DCL: Data control language
	To secure the database
	Used to create roles, permissions, referntial integrity and used to control access to the database by securing it. 
	Grant-> grant previlages to user
			GRANT pervilage_name
				ON object_name
				TO {user_name|public|role_name}
				[WITH GRANT OPTION]
			Example:
			GRANT UPDATE ON employees TO user2 WITH GRANT OPTION;
	
	Revoke -> revoke previlages from User
			REVOKE previlage_name ON object_name FROM {user_name|public|role_name}
			Example:
				REVOKE SELECT ON employee FROM user2
			Note: 
				REVOKE statement can revoke only the rights which were granted by GRANT statement.
				Cascading REVOKE:
					Any privilage given to any user by another grantor user(u2) having this privilage "WITH GRANT OPTION" will automatically be revoked when this privilege revoked by object owner(u1) from his grantor user(u2)
					
	Previleges:
		It is a right to execute a particular type of SQL statement or to access another users objects.
		DBA is high level user with ability to grant users the access to the database and its objects.
		2 types of privileges:
			System privilege
				"System" :  creating session, table etc are all types of system privilege.
				only 2 types of users can grant or revoke the pervileges:
					Users with system privileges <- GRANT ANY PRIVILEGE
					Users who were granted a specific system privilege with the ADMIN OPTION
				Examples:
					CREATE ANY INDEX
					CREATE SEQUENCE
					DROP PROCEDURE
					ALTER USER
				Example:
					GRANT ALTER TABLE, DROP TABLE TO USER2;
				Specify WITH ADMIN OPTION to
					 grant the privilege or role to another user or role, unless the role is global role.
					 revoke the privelege or role from another user or role.
					 Example:
					 GRANT create trigger TO user1 WITH ADMIN OPTION.
					 Note:
					 Unlike WITH GRANT OPTION cascading revoke is not possible in case of system privileges granted using WITH ADMIN OPTION
					 
			Object privilege
				"Object" : any command or query to work on tables comes under object privilege.
				It is a priivilege or right to perform a particular action on a speific schema object like table, view, sequence, procedure etc.
				Each oject has specific privilege associated with it. example: ALTER, DELETE, EXECUTE, INDEX, INSERT, REFERENCES, SELECT.
				Exmaple:
					GRANT SELECT ON user1.employee TO user2 with WITH GRANT OPTION
				Who can Grant Object Privileges?
					Owner of object 
					Or the user who got the object privileges from the owner of the object with the grant option.
					Or user with GRANT ANY OBJECT PRIVILEGE
					Otherwise the grantee can use the privilege but can not grant it t other users.
					
			Role:
				Instead of assigning MULTIPLE PRIVILEGES to a user, grant a SINGLE ROLE.
				A role can be assigned multiple roles
				If a privilege is removed or added to a role, then it reflects automatically in all roles and users which are assigned with this role.
				Password can be assigned to a role.
				Creating a role:
					CREATE ROLE <roleName> IDENTIFIED BY password123 / USING package/ EXTERNALLY /GLOBALLY
				Example:
						GRANT SELECT, CREATE TABLE ON user1.employee TO role1
						REVOKE SELECT ON user1.emplouee FROM role1
						* select * from DBA_ROLE_PRIVS where grantee = 'U1'
				Enable/Disable role:
					To enlabe or disable a role for a current session you can use SET ROLE statament.
					SET ROLE NONE <- disables all roles in current session
					SET ROLE role1 IDENTIFIED BY test123 <- enable role with passowrd
					DROP ROLE rol1 <- removes role  from database dictionary
				
					
		Can we allow role as well and privilege to be assigned in sigle statement?
		Does create trigger require WITH ADMIN OPTION always?
		
		
			
Functions:

Implicit data type conversion:
	Date <=> Varchar/Char <=> Number
Conversion fucntions
	Explicit Comnverison:
		To_Char
		To_Number
		To_Date
			Example:
				to_char(Date,'format_model')
Nesting functions:
				Single row functions can be nested to any level. Evaluation is inside out.
Conditional expressions
	Case Expressions:
		CASE expr WHEN expr1 THEN return_expr1[WHEN e2 THEN re2 .... ELSE else_expr1]
		Here, return can not be null. "expr" and "exprN" type must match. Must not return NULL literal. Returns on first match
		Example:
			Case jobid When 'SALES_REP' then '1.05*salary' when 'SALES_HEAD' then '1.12*salary' else salary END "calculation for revised salary'
	Decode Syntax:
		DECODE col/expr, seach1, result1[ , search2, result2, searchn, resultn, default]
		Here, expr is matched with the search term, if it matches corrsponding result term is returned other wise NULL is returned if default value is not present.
		Exmple:
			DECODE (joid, 'SALES_REP' ,'1.05 * salary', 'SALES_HEAD','1.12*salary',salary ) "calculation for revised salary"
Multi row functions:	
		Operation on set of rows to return one result per group.
		These sets ca be whole tables or tables split n groups by criteria.
		Group fucntinos:
		Group functions are NOT allowed in WHERE clause
			Avg, Sum, stddev, variance <- oly numeric
			Max, Min <- Numeric and others
			count <- all
		DISTINCT <- makes consider only unique values.
		ALL <- every vlaue oncluding duplicates
		All griup functions ignore null values by default
		Example:
			SELECT count(*) from Employee
			SELECT count(commitionPct) from Employee
		Group By clause:
			Used to divide the rows in table in groups.
			When group function is present in select list user can not select individual rows as well; unless individual column alias in not allowed in group by clause.
			Using WHERE clause rows can be excluded before dividing them in groups
			Column names must be included in group by clause. Column alias is not allowed
			All columns in SELECT List that are  not in group function must be in a group by clause.
			HAVING <- Where is used to exclude the selected rows in same way HAVING is used to restrict the groups.
				Rows are grouped
				Group function is applied
				Groups matching the criateria in HAVIONG clause are displayed.
					SElECT jobid, sum(salary)
					FROM employee
					Where jobid NOT LIKE '%PROF%'
					Group by jobid
					Having sum(salary) >= 50000
					ORDER BY Sum(salary)
			
Combining Data
	Inner Join/EquiJoin
	Natural Join
	Cartesian Product
	Self Join
	Outer join
		
	Table Alias:
		Can be up to 30 characters.
		It is valid for current select statement.
	
	Self join:
		Join table to itself
		Select e.empId , e.empFname ||' '||e.empLname empFullName, m.mangId , m.empFname ||' '||e.empLname mangFullName from employee e, employee m where e.managerid = m.employeeid
		
	Outer Join:
		If a particular row does not satisfy the join condition , its not included in the results. To include such rows user can use outer join condition.
		Operator : (+)
		This operator creates one or more null rows to which one or more null rows from other non deficient table can be joined
		Condition involving Outer join can not have IN operator or be linked to another condition using OR operator
		Example:
			select e.employeeid, e.lastname, d.departmentid, d.departmentname from Employee e, department d
			where e.departmentid = d.departmentid(+)
		ANSI syntax:
			select table1.column, table2.column from table1 LEFT/FULL/RIGHT OUTER JOIN table2 ON (table1.column = table2.column)
			
			e.departmentid = d.departmentid(+) <- left outer join
			e.departmentid(+) = d.departmentid <- right outer join
			e.departmentid = d.departmentid(+) UNION e.departmentid(+) = d.departmentid <- full outer join
			
		## can the group by and joins used together?
		## simple case and search case

	


